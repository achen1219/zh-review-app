// generate_data.js
// Usage: node generate_data.js
// Outputs a data.js file exporting `charDetails` with bopomofo, definitions, examples, phrases2/3/4.

const fetch = require('node-fetch');  // v2
const fs    = require('fs');

// ‚Üê‚Äì‚Äì‚Äì REPLACE this with your actual key from https://pedia.cloud.edu.tw/apiui.html
const apiKey = 'ca3c6b07-0e0e-4774-a57d-6d0bb178801d';

// ‚îÄ‚îÄ‚îÄ 1) Your schedule: add new dates/characters here once a month ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const schedule = {
  "2025-05-07": ["ËÖ∞","Ëìã","Âàù","Â§è","ÁúÅ","Ê°ê","ÂåÖ","È°û","Ë≥á","ÂΩ±","Êï¶","Áàæ","ÊÇü","ÊãÜ"],
  "2025-05-08": ["Âèñ","Êä¨","ËÖ∞","Ëìã","Âàù","Â§è","ÊäÄ","Á•®","Âë®","‰æã","ÊìÅ","Êì†","Áõõ","Èö®"]
  // ‚Ä¶add more dates as needed‚Ä¶
};
// flatten & dedupe
const chars = Array.from(new Set(Object.values(schedule).flat()));


// ‚îÄ‚îÄ‚îÄ 2) Fetch Mandarin + definitions + Minnan examples ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async function fetchDetail(ch) {
  const url = `https://pedia.cloud.edu.tw/api/v2/Detail`
            + `?term=${encodeURIComponent(ch)}`
            + `&api_key=${apiKey}`;
  const res  = await fetch(url);
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  const json = await res.json();

  // Pick the first heteronym from revised_dict:
  const revH   = json.revised_dict?.heteronyms?.[0] || {};
  // Clean array of definitions from the ‚Äúmini_dict‚Äù
  const miniH  = json.mini_dict?.heteronyms?.[0]    || {};
  // Minnan example sentences
  const minnanH= json.minnan_dict?.heteronyms?.[0]  || {};

  // Build clean arrays:
  const definitions = Array.isArray(miniH.definitions)
    ? miniH.definitions.map(d => d.def)
    : (Array.isArray(revH.definitions)
       ? revH.definitions.map(d => d.def)
       : []);

  const examples = Array.isArray(minnanH.definitions)
    ? minnanH.definitions
        .map(d => d.exp)
        .filter(exp => !!exp)
    : [];

  return {
    char:        ch,
    bopomofo:    revH.bopomofo || '',
    definitions,
    examples
  };
}


// ‚îÄ‚îÄ‚îÄ 3) Fetch 2/3/4-character collocations ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async function fetchCollocations(ch) {
  const url = `https://pedia.cloud.edu.tw/api/v2/Collocation`
            + `?term=${encodeURIComponent(ch)}`
            + `&api_key=${apiKey}`;
  const res = await fetch(url);
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  const json = await res.json();

  // First record under .data array
  const c = Array.isArray(json.data)
          ? json.data[0]
          : (json.data || {});

  return {
    phrases2: Array.isArray(c.phrases_2) ? c.phrases_2 : [],
    phrases3: Array.isArray(c.phrases_3) ? c.phrases_3 : [],
    phrases4: Array.isArray(c.phrases_4)
             ? c.phrases_4
             : (Array.isArray(c.collocations_4) ? c.collocations_4 : [])
  };
}


// ‚îÄ‚îÄ‚îÄ 4) Main: fetch everything & write data.js ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
(async () => {
  const charDetails = {};

  for (const ch of chars) {
    try {
      // parallel fetch
      const [core, coll] = await Promise.all([
        fetchDetail(ch),
        fetchCollocations(ch)
      ]);
      charDetails[ch] = { ...core, ...coll };
      console.log('‚úÖ Fetched', ch);
    } catch (err) {
      console.warn('‚ö†Ô∏è Failed', ch, err.message);
      charDetails[ch] = {
        char: ch,
        bopomofo: '',
        definitions: [],
        examples: [],
        phrases2: [],
        phrases3: [],
        phrases4: []
      };
    }
  }

  // write data.js
  const out = [
    '// AUTO-GENERATED by generate_data.js',
    'export default ',
    JSON.stringify(charDetails, null, 2),
    ';'
  ].join('\n');
  fs.writeFileSync('data.js', out, 'utf-8');
  console.log(`üéâ data.js written with ${Object.keys(charDetails).length} entries`);
})();
