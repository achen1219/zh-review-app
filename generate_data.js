// generate_data.js
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// 1) npm install node-fetch@2
// 2) node generate_data.js
// Produces data.js exporting `charDetails` with all fields.

const fetch = require('node-fetch');
const fs    = require('fs');

// ‚Üê your API key (embedded for you)
const apiKey = 'ca3c6b07-0e0e-4774-a57d-6d0bb178801d';

// 1) Your study schedule
const schedule = {
  "2025-05-07": ["ËÖ∞","Ëìã","Âàù","Â§è","ÁúÅ","Ê°ê","ÂåÖ","È°û","Ë≥á","ÂΩ±","Êï¶","Áàæ","ÊÇü","ÊãÜ"],
  "2025-05-08": ["Âèñ","Êä¨","ËÖ∞","Ëìã","Âàù","Â§è","ÊäÄ","Á•®","Âë®","‰æã","ÊìÅ","Êì†","Áõõ","Èö®"]
  // ‚Ä¶add more dates as needed‚Ä¶
};
const chars = Array.from(new Set(Object.values(schedule).flat()));


// 2) Fetch Ê≥®Èü≥ + ÂÆöÁæ© + ‰æãÂè• from Detail endpoint
async function fetchDetail(ch) {
  const url = `https://pedia.cloud.edu.tw/api/v2/Detail`
            + `?term=${encodeURIComponent(ch)}`
            + `&api_key=${apiKey}`;
  console.log(`‚Üí GET Detail for ${ch}`);

  const res  = await fetch(url);
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  const json = await res.json();

  const revH    = json.revised_dict?.heteronyms?.[0] || {};
  const miniH   = json.mini_dict?.heteronyms?.[0]    || {};
  const minnanH = json.minnan_dict?.heteronyms?.[0]  || {};

  const definitions = Array.isArray(miniH.definitions)
    ? miniH.definitions.map(d => d.def)
    : (Array.isArray(revH.definitions)
        ? revH.definitions.map(d => d.def)
        : []);

  const examples = Array.isArray(minnanH.definitions)
    ? minnanH.definitions.map(d => d.exp).filter(x => !!x)
    : [];

  return {
    char:        ch,
    bopomofo:    revH.bopomofo || '',
    definitions,
    examples
  };
}


// 3) Fetch phrases2/3/4 from Collocation endpoint
async function fetchCollocations(ch) {
  const url = `https://pedia.cloud.edu.tw/api/v2/Collocation`
            + `?term=${encodeURIComponent(ch)}`
            + `&api_key=${apiKey}`;
  console.log(`‚Üí GET Collocation for ${ch}`);

  const res  = await fetch(url);
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  const json = await res.json();

  const c = Array.isArray(json.data) ? json.data[0] : (json.data || {});

  return {
    phrases2: Array.isArray(c.phrases_2) ? c.phrases_2 : [],
    phrases3: Array.isArray(c.phrases_3) ? c.phrases_3 : [],
    phrases4: Array.isArray(c.phrases_4)
             ? c.phrases_4
             : (Array.isArray(c.collocations_4) ? c.collocations_4 : [])
  };
}


// 4) Orchestrate & write `data.js`
(async () => {
  const charDetails = {};

  for (const ch of chars) {
    try {
      // fire both calls in parallel
      const [detail, colloc] = await Promise.all([
        fetchDetail(ch),
        fetchCollocations(ch)
      ]);
      charDetails[ch] = { ...detail, ...colloc };
      console.log('‚úÖ', ch);
    } catch (err) {
      console.warn('‚ö†Ô∏è Failed', ch, err.message);
      charDetails[ch] = {
        char, bopomofo:'', definitions:[], examples:[],
        phrases2:[], phrases3:[], phrases4:[]
      };
    }
  }

  // write file
  const out = [
    '// AUTO-GENERATED by generate_data.js',
    'export default ',
    JSON.stringify(charDetails, null, 2),
    ';'
  ].join('\n');

  fs.writeFileSync('data.js', out, 'utf-8');
  console.log(`üéâ data.js written with ${Object.keys(charDetails).length} entries`);
})();
